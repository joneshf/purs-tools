name: main

# Controls when the action will run.
on:
  # Triggers the workflow on push for any branch
  push:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build on ${{ matrix.os }}
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-10.15
          # We need an older version of Ubuntu to keep the dynamic dependencies inline with the `purescript` package we depend on.
          # We can bump this version up if either:
          #     - We can figure out how to statically link with the `purescript` dependency.
          #     - We drop the `purescript` dependency and can statically link.
          - ubuntu-16.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - if: runner.os == 'Linux'
        name: Cache Linux
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: |
            /home/runner/.cache/bazel/_bazel_runner
            .build
            bazel-*
          # An explicit key for restoring and saving the cache
          # We work around the issue of not having a useful lock file (and a hermetic build) by using the git SHA as part of the key.
          # This will fail to find a cache hit and fall back to the `restore-keys`.
          # The `restore-keys` uses a prefix of this key so it will find _something_ in the cache.
          # We can change our cache key strategy if the cache action ever solves this problem.
          # Re: https://github.com/actions/cache/issues/109#issuecomment-558771281.
          key: ${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-

      - if: runner.os == 'macOS'
        name: Cache macOS
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: |
            /private/var/tmp/_bazel_runner
            .build
            bazel-*
          # An explicit key for restoring and saving the cache
          # We work around the issue of not having a useful lock file (and a hermetic build) by using the git SHA as part of the key.
          # This will fail to find a cache hit and fall back to the `restore-keys`.
          # The `restore-keys` uses a prefix of this key so it will find _something_ in the cache.
          # We can change our cache key strategy if the cache action ever solves this problem.
          # Re: https://github.com/actions/cache/issues/109#issuecomment-558771281.
          key: ${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-

      - name: Build
        run: make

      - if: runner.os == 'Linux'
        name: Upload Linux purs-compile-module
        uses: actions/upload-artifact@v2.2.2
        with:
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
          # Artifact name
          name: purs-compile-module-${{ github.sha }}-linux.tar.gz
          # A file, directory or wildcard pattern that describes what to upload
          path: bazel-bin/cmd/purs-compile-module/purs-compile-module.tar.gz

      - if: runner.os == 'Linux'
        name: Upload Linux purs-module-information
        uses: actions/upload-artifact@v2.2.2
        with:
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
          # Artifact name
          name: purs-module-information-${{ github.sha }}-linux.tar.gz
          # A file, directory or wildcard pattern that describes what to upload
          path: bazel-bin/cmd/purs-module-information/purs-module-information.tar.gz

      - if: runner.os == 'macOS'
        name: Upload macOS purs-compile-module
        uses: actions/upload-artifact@v2.2.2
        with:
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
          # Artifact name
          name: purs-compile-module-${{ github.sha }}-macOS.tar.gz
          # A file, directory or wildcard pattern that describes what to upload
          path: bazel-bin/cmd/purs-compile-module/purs-compile-module.tar.gz

      - if: runner.os == 'macOS'
        name: Upload macOS purs-module-information
        uses: actions/upload-artifact@v2.2.2
        with:
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
          # Artifact name
          name: purs-module-information-${{ github.sha }}-macOS.tar.gz
          # A file, directory or wildcard pattern that describes what to upload
          path: bazel-bin/cmd/purs-module-information/purs-module-information.tar.gz
