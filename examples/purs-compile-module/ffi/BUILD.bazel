load(
    "@bazel_skylib//rules:build_test.bzl",
    "build_test",
)
load(
    "@joneshf_rules_purescript//purescript:defs.bzl",
    "purescript_library",
)

build_test(
    name = "ffi_library_test",
    targets = [
        ":ffi_library",
    ],
)

build_test(
    name = "ffi_test",
    targets = [
        ":ffi",
    ],
)

# If we wanted to manage all of the flags and the usage of `purs-compile-module` by hand,
# we can use a `genrule` like below.
# This is largely to show how it's _possible_ to pass flags around.
# Usage of `purs-compile-module` should be automated by some other tooling.
genrule(
    name = "ffi",
    srcs = [
        "Foo.purs",
        "Foo.js",
    ],
    outs = [
        "externs.cbor",
        "ffi.js",
        "index.js",
    ],
    cmd = " ".join(
        [
            "$(execpath //cmd/purs-compile-module)",
            "--input-ffi-file $(execpath Foo.js)",
            "--output-ffi-file $(RULEDIR)/ffi.js",
            "--output-javascript-file $(RULEDIR)/index.js",
            "--output-standard-externs-file $(RULEDIR)/externs.cbor",
            "--purs-file $(execpath Foo.purs)",
        ],
    ),
    tools = [
        "//cmd/purs-compile-module",
    ],
)

# If we don't want to manage everything ourselves,
# we can use a rule like below.
# This is more likely how we'd actually want to interact with `bazel`.
purescript_library(
    name = "ffi_library",
    src = "Foo.purs",
    ffi = "Foo.js",
    module = "Foo",
)
