load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_library",
    "haskell_repl",
    "haskell_test",
    "haskell_toolchain_library",
)

haskell_library(
    name = "compile-module",
    package_name = "compile-module",
    srcs = [
        "CompileModule.hs",
        "CoreFn.hs",
        "Error.hs",
        "ExternsFile.hs",
        "JavaScript.hs",
        "SignatureExternsFile.hs",
        "Version.hs",
    ],
    compiler_flags = [
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
    ],
    visibility = [
        "//cmd/purs-compile-module:__subpackages__",
    ],
    deps = [
        ":base",
        ":containers",
        ":mtl",
        "@stackage//:optparse-applicative",
        "@stackage//:purescript",
        "@stackage//:rio",
    ],
)

haskell_repl(
    name = "hie-bios",
    collect_data = False,
    deps = [
        ":compile-module",
    ],
)

haskell_test(
    name = "exit_test",
    srcs = [
        "ErrorTest.hs",
    ],
    compiler_flags = [
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
    ],
    main_function = "ErrorTest.exit",
    deps = [
        ":compile-module",
        "@stackage//:hedgehog",
        "@stackage//:purescript",
        "@stackage//:rio",
    ],
)

haskell_test(
    name = "fromRebuildModule_test",
    srcs = [
        "ErrorTest.hs",
    ],
    compiler_flags = [
        "-Wall",
        "-Wcompat",
        "-Werror",
        "-Wincomplete-record-updates",
        "-Wincomplete-uni-patterns",
        "-Wmissing-methods",
        "-Wredundant-constraints",
    ],
    main_function = "ErrorTest.fromRebuildModule",
    deps = [
        ":compile-module",
        "@stackage//:hedgehog",
        "@stackage//:purescript",
        "@stackage//:rio",
    ],
)

haskell_toolchain_library(
    name = "base",
)

haskell_toolchain_library(
    name = "containers",
)

haskell_toolchain_library(
    name = "mtl",
)
